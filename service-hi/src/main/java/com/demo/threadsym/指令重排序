重排序概念:
    好处:不影响单线程程序正确性的情况下提升程序的性能。

    坏处:多核处理器的环境下，执行顺序可能是没有保障的：编译器可能改变两个操作的先后顺序；
    对多线程程序的正确性产生影响，即它可能导致线程安全问题。
    与可见性问题类似，重排序也不是必然出现的。

    重排序的潜在来源:
    1.包括编译器（在Java平台中这基本上指JIT编译器）
    2.处理器和存储子系统（包括写缓冲器、高速缓存）

        术语:
        源代码顺序：源代码中所指定的内存访问操作顺序。
        程序顺序：处理器上运行的目标代码指定的内存访问操作顺序。
        执行顺序：内存访问操作在给定处理器上的实际执行顺序。
        感知顺序：给定处理器所感知到的该处理器及其他处理器的内存访间操作发生的顺序。

重排序的学习:==================================================================================
如何对二进制代码进行编译可以将JVM的执行方式分为三种 以下:
解释执行 :java -Xint HelloWorld
解释执行是指所有的二进制代码都在每次执行的时候临时进行编译，也就是一边编译一边执行。
这样做无疑会降低程序的执行效率，因为代码在每一次执行的时候都会重新编译，及时是那些执行很频繁的代码。

编译执行 :java -Xcomp HelloWorld
编译执行是指由编译器将目标代码一次性全部编译成目标程序，再由机器运行目标程序。
这样相比解释执行来说虽然启动较慢，但启动之后的执行速度会得到很大的提升。
不过，这种执行方式也有缺点，那就是尽管有些代码执行的频率很低，
JVM仍然会将其预先编译为机器码，这也是造成这种执行方式启动慢的最主要原因。

混合执行 ：java -Xmixed HelloWorld
混合执行则是将这两种执行方式结合了起来。程序最开始的时候采用的执行方式是解释执行，
当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。
为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，
并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Compiler，下文统称JIT编译器）。

在Java平台中，静态编译器javac基本上不会进行指令重排序，而JIT编译器则可能在优化的过程中执行指令重排序。
演示见: PossibleReordering.java



