1.什么是java的重量级锁、自旋锁、轻量级锁和偏向锁?
https://blog.csdn.net/zqz_zqz/article/details/70233767

偏向锁
Java偏向锁(Biased Locking)是Java6引入的一项多线程优化。
偏向锁会偏向于第一个访问锁的线程，如果在运行过程中，
同步锁只有一个线程访问，不存在多线程争用的情况，
则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。
如果在运行过程中，遇到了其他线程抢占锁，则持有偏向锁的线程会被挂起，JVM会消除它身上的偏向锁，将锁恢复到标准的轻量级锁。

自旋锁
自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，
那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），
等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。

但是线程自旋是需要消耗cup的，说白了就是让cup在做无用功，如果一直获取不到锁，
那线程也不能一直占用cup自旋做无用功，
所以需要设定一个自旋等待的最大时间。
    1|如果平均负载小于CPUs则一直自旋
    2|如果有超过(CPUs/2)个线程正在自旋，则后来线程直接阻塞
    3|如果正在自旋的线程发现Owner发生了变化则延迟自旋时间（自旋计数）或进入阻塞
    4|如果CPU处于节电模式则停止自旋
    5|自旋时间的最坏情况是CPU的存储延迟（CPU A存储了一个数据，到CPU B得知这个数据直接的时间差）
    6|自旋时会适当放弃线程优先级之间的差异

